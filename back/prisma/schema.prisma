// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  firstname           String
  lastname            String
  password            String
  language            LanguageEnum
  profile             Profile?
  plants              Plant[]
  admin               Boolean               @default(false)
  WebPushSubscriptios WebPushSubscription[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model WebPushSubscription {
  id             String   @id @default(uuid())
  endpoint       String
  expirationTime String?
  p256dh         String
  auth           String
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Profile {
  id           String   @id @default(uuid())
  urlAvatar    String?
  bucketAvatar String?
  gcpIdAvatar  String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Plant {
  id           String      @id @default(uuid())
  name         String
  serialNumber String
  macAddress   String
  isEnable     Boolean
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  datas        PlantData[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model PlantData {
  id           String   @id @default(uuid())
  plant        Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
  plantId      String
  temperature  Float
  humidityAir  Float
  humiditySoil Float
  pressure     Float
  battery      Float
  light        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id        String           @id @default(uuid())
  isRead    Boolean
  type      NotificationType
  moreInfo  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum LanguageEnum {
  EN
  FR
}

enum NotificationType {
  NEW_PLANT
  WATERING
}
